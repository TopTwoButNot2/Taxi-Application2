@model TaxiApplication.Data.Route

@{
    /**/

    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Admin.cshtml";

}

<h2>Create</h2>

@using (Html.BeginForm("Create", "Routes", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal modal-content" style="margin-top:2%;width:45%;padding-left:30px;padding-right:30px;margin-bottom:50px">
    <h4>Add Route</h4>
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @*<div class="form-group">
            @Html.LabelFor(model => model.RouteId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RouteId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RouteId, "", new { @class = "text-danger" })
            </div>
        </div>*@

    <div class="form-group">
        <h3> Route Name </h3>          <div class="col-md-10">
            @Html.EditorFor(model => model.RouteName, new { htmlAttributes = new { @class = "form-control", id = "travelto" } })
            @Html.ValidationMessageFor(model => model.RouteName, "", new { @class = "text-danger" })
            <br />
            <input type="button" value="Add" id="addbtn" onclick="PushDestination()" />
        </div>
    </div>
    <div style="display:none" id="routeinfo">
        <div class="form-group">
            <h3> Route Distance </h3>
            <div class="col-md-10">
                @Html.EditorFor(model => model.RouteDistance, new { htmlAttributes = new { @class = "form-control", id = "dis", @readonly = "readonly", required = "required" } })
                @Html.ValidationMessageFor(model => model.RouteDistance, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <h3> Route Time </h3>
            <div class="col-md-10">
                @Html.EditorFor(model => model.RouteDuration, new { htmlAttributes = new { @class = "form-control", id = "time", @readonly = "readonly", required = "required" } })
                @Html.ValidationMessageFor(model => model.RouteDuration, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.picture, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <i class="fa fa-file-picture-o"></i>
                <input type="file" name="img_upload" value="Upload File" />
                @Html.ValidationMessageFor(model => model.picture, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <h3>Stop Over </h3>          <div class="col-md-10">
                @Html.EditorFor(model => model.StopOver, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StopOver, "", new { @class = "text-danger" })
            </div>
        </div>

        <label>Select Rank</label>
        @Html.DropDownList("RankId", null, htmlAttributes: new { @class = "w3-border w3-padding", style = "width:100%" })
        @Html.ValidationMessageFor(model => model.RankId, "", new { @class = "text-danger" })

        <label>Select Rank Manager</label>
        @Html.DropDownList("rankmanagerID", null, htmlAttributes: new { @class = "w3-border w3-padding", style = "width:100%" })
        @Html.ValidationMessageFor(model => model.rankmanagerID, "", new { @class = "text-danger" })

        <span class="w3-left">
            <a class="w3-button" type="submit" style="margin-top:5px;background-color:#f0ad4e;color:white" href="~/Routes/Index"> Back </a>
        </span>

        <span class="w3-right">
            <button class="w3-button" type="submit" style="margin-top:5px;background-color:#f0ad4e;color:white"> Save </button>
        </span>
        <br />
        <br />
        <br />
        <br />
    </div>
    <div class="col-md-4">
        <img id="image_preview" src="#" alt="" @*style="border: 5px solid #ccc"*@ />
    </div>
    </div>

}
<div class="col-md-6">
    <div class="col-md-6">
        <img id="image_preview" src="#" alt="" />
    </div>

    <script type="text/javascript">
        //image preview
        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#image_preview')
                        .attr('src', e.target.result)
                        .width(400)
                        .height(400);

                };

                reader.readAsDataURL(input.files[0]);
            }
        }
    </script>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false&libraries=places"></script>
    <script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyDdl92Jhloy3TczguBxXwqD5AH3m2oCNY0" type="text/javascript"></script>


    <script type="text/javascript">

        google.maps.event.addDomListener(window, 'load', function () {
            var options = {
                types: ['(cities)'],
                componentRestrictions: { country: "ZA" }
            };

            var input = document.getElementById('RouteName');

            var places = new google.maps.places.Autocomplete(input, options);


        });
    </script>
    <script type="text/javascript">

        google.maps.event.addDomListener(window, 'load', function () {
            var options = {
                types: ['(cities)'],
                componentRestrictions: { country: "ZA" }
            };

            var input = document.getElementById('StopOver');

            var places = new google.maps.places.Autocomplete(input, options);


        });
    </script>

    <div class="row" style="display:none">
        <div class="form-horizontal modal-content" style="margin-top:2%;width:45%;padding-left:30px;padding-right:30px;margin-bottom:50px;margin-left:60%">

            <div> Add Destination</div>
            <div>
                <input type="text" name="name" value="Oving, UK" />
                <input type="button" value="Add" onclick="PushDestination()" />

            </div>
            <div id="destinations"></div><br />
            Source : <input id="travelfrom" type="text" name="name" value="Durban, South Africa" />   <br />  <br />


            <input type="button" value="Calculate" onclick="GetRoute()" />
            <p></p>
            <br />
            <div id="dvDistance">
                <table id="tblResults" border="1" cellpadding="10">
                    <tr>
                        <th> Source </th>
                        <th> Destination </th>
                        <th> Distance </th>
                        <th> Duration </th>
                    </tr>
                </table>

            </div>

            <p></p>

            <div id="dvMap" style="min-height:500px"></div>

        </div>
    </div>

    <!--ENSURE YOU CHANGE TO YOUR OWN API KEY HERE !!! -->
    <script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyDdl92Jhloy3TczguBxXwqD5AH3m2oCNY0" type="text/javascript"></script>

    <!-- code for example 1 -->
    <script>

        var source, destination;
        var locations = [];
        var directionsDisplay;
        var directionsService = new google.maps.DirectionsService();

        // initialise the location of the map on Chichester in England (ref lat and lng)
        var map = new google.maps.Map(document.getElementById('dvMap'), {
            center: { lat: 50.834697, lng: -0.773792 },
            zoom: 13,
            mapTypeId: 'roadmap'
        });

        google.maps.event.addDomListener(window, 'load', function () {
            new google.maps.places.SearchBox(document.getElementById('travelfrom'));
            new google.maps.places.SearchBox(document.getElementById('travelto'));
            directionsDisplay = new google.maps.DirectionsRenderer({ 'draggable': true });
        });

        function PushDestination() {
            destination = document.getElementById("travelto").value;
            locations.push(destination);
            document.getElementById("routeinfo").style.display = "inline-block";
            document.getElementById("addbtn").style.display = "none";
            destinationArray = document.getElementById("destinations");
            destinationArray.innerHTML += destination + "<br />";
            GetRoute();
        }

        function setDestination(dest) {
            document.getElementById('travelto').value = dest;
            PushDestination();
        }


        function GetRoute() {

            directionsDisplay.setMap(map);

            source = document.getElementById("travelfrom").value;
            destination = document.getElementById("travelto").value;

            var waypoints = [];
            for (var i = 0; i < locations.length; i++) {
                var address = locations[i];
                if (address !== "") {
                    waypoints.push({
                        location: address,
                        stopover: true
                    });
                }
            }

            var request = {
                origin: source,
                destination: waypoints[0].location,
                waypoints: waypoints, //an array of waypoints
                optimizeWaypoints: true, //set to true if you want google to determine the shortest route or false to use the order specified.
                travelMode: google.maps.DirectionsTravelMode.DRIVING
            };

            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    var dvDistance = document.getElementById("dvDistance");
                    var distance = 0;
                    var minute = 0.00;
                    response.routes[0].legs.forEach(function (item, index) {
                        if (index < response.routes[0].legs.length - 1) {
                            distance = distance + parseInt(item.distance.text);
                            document.getElementById("dis").value = distance;
                            minute = parseFloat(minute) + parseFloat(item.duration.value / 60);
                            document.getElementById("time").value = minute;

                            tbl = document.getElementById("tblResults");
                            var row = tbl.insertRow(1);
                            var cell = row.insertCell(0);
                            cell.innerText = source;
                            var cell = row.insertCell(1);
                            cell.innerText = item.end_address;
                            var cell = row.insertCell(2);
                            cell.innerText = distance;
                            var cell = row.insertCell(3);
                            cell.innerText = minute.toFixed(2) + " min";
                        }
                    });
                    directionsDisplay.setDirections(response);
                }
                else {
                    //handle error
                }
            })
        };

    </script>
    <!-- end code for example 1 -->

}

